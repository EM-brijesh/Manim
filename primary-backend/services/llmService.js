import 'dotenv/config';
import axios from 'axios';
import { v4 as uuidv4 } from 'uuid';
import { S3Client, PutObjectCommand } from '@aws-sdk/client-s3';
import { enqueueRenderJob } from './producer.js';
import pkg from '@prisma/client';
const { PrismaClient } = pkg;
const prisma = new PrismaClient();


const GEMINI_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent';

const REGION = process.env.AWS_REGION || 'ap-south-1';
const s3 = new S3Client({
  region: REGION,
  credentials: {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
  }
});

export const generateManimCode = async (prompt ,userId , promptId) => {
  const fullPrompt = `
You are an expert Python developer using the Manim Community Edition (manimce) version 0.18.0.

Generate a complete and minimal Python script using Manim to visually explain the following topic:

"${prompt}"

Use only built-in features like Text, MathTex, Circle, Square, and animations like Write, FadeIn, and Transform.
Avoid using external files like images or fonts.

Define a class named: AutoGeneratedScene(Scene)
The script must contain the full code, including all necessary imports and the construct(self) method.

Ensure the code is syntactically valid and directly runnable inside a container using the manim CLI.

Output only valid Python code. Do not include any extra commentary or explanation.
`;

  try {
    // 1) Call Gemini
    const llmResp = await axios.post(
      `${GEMINI_URL}?key=${process.env.GEMINI_API_KEY}`,
      {
        contents: [{ parts: [{ text: fullPrompt }] }]
      },
      { headers: { 'Content-Type': 'application/json' } }
    );
 
    let content = llmResp.data.candidates?.[0]?.content?.parts?.[0]?.text?.trim() || '';
    if (!content) {
      throw new Error('No content returned from Gemini');
    }
    content = content.replace(/^```python\s*/i, '').replace(/```$/i, '').trim();

    // 2) Build S3 key & metadata
    const s3Key = `code/${userId}/${promptId}.py;`;
    const metadata = {
      prompt: prompt.slice(0, 100),
      timestamp: new Date().toISOString(),
    };

    const uploadParams = {
      Bucket: 'mymanimbucket',
      Key: s3Key,
      Body: content,
      ContentType: 'text/x-python',
      Metadata: metadata,
    };

    // 3) Upload to S3
    await s3.send(new PutObjectCommand(uploadParams));
    console.log(`✅ Uploaded to S3: ${s3Key}`);
    const savedResponse = await prisma.aiResponse.create({
      data: {
        content: content,
        promptId: promptId,
      },
    });

    const fileUrl = `https://${process.env.S3_BUCKET_NAME}.s3.ap-south-1.amazonaws.com/${s3Key}`;
    await enqueueRenderJob({ s3Key, fileUrl, metadata });
    return { content, fileUrl, metadata , savedResponse };

  } catch (err) {
    console.error('Error generating/uploading Manim code:', err.response?.data || err.message);
    throw new Error('Failed to generate or upload Manim code.');
  }
};

//new_service:
export const generateCode = async (prompt, userId, iterationId) => {
  const fullPrompt = `
You are an expert Python developer using the Manim Community Edition (manimce) version 0.18.0.

Generate a complete and minimal Python script using Manim to visually explain the following topic:

"${prompt}"

Use only built-in features like Text, MathTex, Circle, Square, and animations like Write, FadeIn, and Transform.
Avoid using external files like images or fonts.

Define a class named: AutoGeneratedScene(Scene)
The script must contain the full code, including all necessary imports and the construct(self) method.

Ensure the code is syntactically valid and directly runnable inside a container using the manim CLI.

Output only valid Python code. Do not include any extra commentary or explanation.
`;

  try {
    const llmResp = await axios.post(
      `${GEMINI_URL}?key=${process.env.GEMINI_API_KEY}`,
      {
        contents: [{ parts: [{ text: fullPrompt }] }]
      },
      { headers: { 'Content-Type': 'application/json' } }
    );

    let content = llmResp.data.candidates?.[0]?.content?.parts?.[0]?.text?.trim() || '';
    if (!content) {
      throw new Error('No content returned from Gemini');
    }
    content = content.replace(/^```python\s*/i, '').replace(/```$/i, '').trim();

    const s3Key = `code/${userId}/${iterationId}.py`;
    const metadata = {
      prompt: prompt.slice(0, 100),
      timestamp: new Date().toISOString(),
    };

    const uploadParams = {
      Bucket: process.env.S3_BUCKET_NAME,
      Key: s3Key,
      Body: content,
      ContentType: 'text/x-python',
      Metadata: metadata,
    };

    await s3.send(new PutObjectCommand(uploadParams));
    console.log(`✅ Uploaded to S3: ${s3Key}`);

    const fileUrl = `https://${process.env.S3_BUCKET_NAME}.s3.ap-south-1.amazonaws.com/${s3Key}`;

    // ⬇️ Update Iteration
    await prisma.iteration.update({
      where: { id: iterationId },
      data: {
        aiResponse: content,
        code: content,
        // s3Url: fileUrl,
        status: 'PROCESSING'
      }
    });

    // ⬇️ Create Video record
    // await prisma.video.create({
    //   data: {
    //     url: fileUrl,
    //     iteration: { connect: { id: iterationId } }
    //   }
    // });

    await enqueueRenderJob({ s3Key, fileUrl, metadata });

    return { code: content, text: content, fileUrl, metadata };

  } catch (err) {
    console.error('Error generating/uploading Manim code:', err.response?.data || err.message);
    throw new Error('Failed to generate or upload Manim code.');
  }
};

