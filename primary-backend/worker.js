import 'dotenv/config';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { createClient } from 'redis';
import { S3Client, GetObjectCommand, PutObjectCommand } from '@aws-sdk/client-s3';
import { exec } from 'child_process';
import { promisify } from 'util';
import { pipeline } from 'stream/promises';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const execAsync = promisify(exec);

// Redis setup
const redis = createClient();
await redis.connect();

// S3 setup
const REGION = process.env.AWS_REGION || 'ap-south-1';
const s3 = new S3Client({
  region: REGION,
  credentials: {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
  }
});

const TEMP_DIR = path.join(__dirname, 'temp');
fs.mkdirSync(TEMP_DIR, { recursive: true });

async function downloadFromS3(s3Key, localPath) {
  const command = new GetObjectCommand({
    Bucket: process.env.S3_BUCKET_NAME,
    Key: s3Key,
  });

  const data = await s3.send(command);
  const stream = data.Body;
  const writeStream = fs.createWriteStream(localPath);
  await pipeline(stream, writeStream);
}

async function uploadToS3(localPath, s3Key) {
  const fileBuffer = fs.readFileSync(localPath);
  await s3.send(new PutObjectCommand({
    Bucket: process.env.S3_BUCKET_NAME,
    Key: s3Key,
    Body: fileBuffer,
    ContentType: 'video/mp4',
  }));
}

async function processJob(jobData) {
  const { s3Key, fileUrl, metadata } = JSON.parse(jobData);

  const filename = path.basename(s3Key);
  const localScriptPath = path.join(TEMP_DIR, filename);
  const outputFileName = 'AutoGeneratedScene.mp4';
  const outputPath = path.join(TEMP_DIR, outputFileName);

  console.log(`üéØ Processing job: ${s3Key}`);

  try {
    await downloadFromS3(s3Key, localScriptPath);
    console.log(`üì• Downloaded Python script from S3`);

    const renderCommand = `manim -ql ${localScriptPath} AutoGeneratedScene`;
    const { stdout, stderr } = await execAsync(renderCommand, { cwd: TEMP_DIR });
    console.log(stdout);
    if (stderr) console.error(stderr);

    const outputVideoPath = path.join(TEMP_DIR, 'media/videos/AutoGeneratedScene/1080p60', outputFileName);
    const videoS3Key = s3Key.replace('manim-responses', 'manim-videos').replace('.py', '.mp4');

    await uploadToS3(outputVideoPath, videoS3Key);
    console.log(`‚úÖ Uploaded video to S3: ${videoS3Key}`);

  } catch (err) {
    console.error('‚ùå Failed to process job:', err.message);
  }
}

async function startWorker() {
  console.log('üë∑ Worker started...');
  while (true) {
    const job = await redis.brPop('renderQueue', 0); // Block until job is available
    if (job && job.element) {
      await processJob(job.element);
    }
  }
}

startWorker();
